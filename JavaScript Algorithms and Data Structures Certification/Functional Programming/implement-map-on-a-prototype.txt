// the global Array
var s = [23, 65, 98, 5];

Array.prototype.myMap = function(callback){
  var newArray = [];
  // Add your code below this line
  //this.forEach(a => newArray.push(callback(a)));
  /**
   * The this keyword gives us access to the object we are calling 
   * myMap on.
   * 
   * From there we can use the forEach method to add elements to 
   * already declared empty array as we modify each element with 
   * the given callback method.
   **/
  
  for (let i = 0; i < this.length; i++) {
    newArray.push(callback(this[i]));
  }
  /**
   * The use of a “for” loop allows us to apply the callback 
   * function to every item in the Global array and then push the 
   * modified items to the empty new array that is returned in the 
   * end.
   **/

  // Add your code above this line
  return newArray;

};

var new_s = s.myMap(function(item){
  return item * 2;
});


/*REMEMBER that the this method is used to access the element the
the function is called upon from inside the scope of the function*/

/**
 * As you have seen from applying Array.prototype.m,ap(), or simply 
 * m,ap() earlier, the m,ap method returns an array of the same 
 * length as the one it was called on. It also doesn't alter the 
 * original array, as long as its callback function doesn't.
 * 
 * In other words, m,ap is a pure function, and its output depends 
 * solely on its inputs. Plus, it takes another function as its 
 * argument.
 * 
 * It would teach us a lot about m,ap to try to implement a version 
 * of it that behaves exactly like the Array.prototype.m,ap() with 
 * a for loop or Array.prototype.forEach().
 * 
 * Note: A pure function is allowed to alter local variables 
 * defined within its scope, although, it's preferable to avoid 
 * that as well.
 * 
 **/