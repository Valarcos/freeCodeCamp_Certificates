/*IF THE CODE DOES NOT WORK BUT YOU ARE SURE ITS WELL WRITTEN, TRY 
USING DIFFERENT VARIABLE/FUNCTION/METHOD/CLASS NAMES (WICHEVER IS 
APROPIATE FOR THE MODIFICATION)*/

/* Alter code below this line */
/*class Thermostat {
    constructor(degreesF) {
        this.degreesF = degreesF;
    }
    //getter
    get celsius() {
        return (5 / 9) * (this.degreesF - 32);

    }
    //setter
    set celsius(degreesC) {
        this.degreesF = (degreesC * 9.0) / 5 + 32;
    }
}*/
class Thermostat {
    constructor(degreesF) {
        this.degreesF = degreesF;
    }
  
    get temperature() { /*for some reason, this challenge would not let me use the name celsius for the getter and setter, thus not letting me instantiate the Thermostat class*/
        return (5 / 9) * (this.degreesF - 32);
    }
  
    set temperature(celsius) {
        this.degreesF = (celsius * 9.0) / 5 + 32;
    }
}
/* Alter code above this line */

const thermos = new Thermostat(76); // setting in F.ahrenheit scale
let temp = thermos.degreesF; // 24.44 in C
console.log(temp);
thermos.degreesF = 26;
temp = thermos.degreesF; // 26 in C


console.log(temp);

/*You can obtain values from an object and set the value of a property
within an object.
These are classically called getters and setters.
Getter functions are meant to simply return (get) the value of an
object's private variable to the user without the user directly
accessing the private variable.
Setter functions are meant to modify (set) the value of an object's
private variable based on the value passed into the setter function.
This change could involve calculations, or even overwriting the
previous value completely.


class Book {
  constructor(author) {
    this._author = author;
  }
  // getter
  get writer() {
    return this._author;
  }
  // setter
  set writer(updatedAuthor) {
    this._author = updatedAuthor;
  }
}
const lol = new Book('anonymous');
console.log(lol.writer);  // anonymous
lol.writer = 'wut';
console.log(lol.writer);  // wut

Notice the syntax used to invoke the getter and setter. They do not
even look like functions. Getters and setters are important because
they hide internal implementation details. Note: It is convention to
precede the name of a private variable with an underscore (_). However,
the practice itself does not make a variable private.*/