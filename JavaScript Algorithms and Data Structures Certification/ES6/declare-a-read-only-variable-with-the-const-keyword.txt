function printManyTimes(str) {
  "use strict";

  // change code below this line

  const SENTENCE = str + " is cool!";
  for (let i = 0; i < str.length; i+=2) {
    console.log(SENTENCE);
  }

  // change code above this line

}
printManyTimes("freeCodeCamp");

/*The keyword let is not the only new way to declare v.ariables. In 
ES6, you can also declare v.ariables using the const keyword.
const has all the awesome features that let has, with the added 
bonus that v.ariables declared using const are read-only. They are a 
constant value, which means that once a v.ariable is assigned with 
const, it cannot be reassigned.

"use strict";
const FAV_PET = "Cats";
FAV_PET = "Dogs"; // returns error

As you can see, trying to reassign a v.ariable declared with const 
will throw an error. You should always name v.ariables you don't want 
to reassign using the const keyword. This helps when you 
accidentally attempt to reassign a v.ariable that is meant to stay 
constant. A common practice when naming constants is to use all 
uppercase letters, with words separated by an underscore.

Note: It is common for developers to use uppercase v.ariable 
identifiers for immutable values and lowercase or camelCase for 
mutable values (objects and arrays). In a later challenge you will 
see an example of a lowercase v.ariable identifier being used for an 
array.*/