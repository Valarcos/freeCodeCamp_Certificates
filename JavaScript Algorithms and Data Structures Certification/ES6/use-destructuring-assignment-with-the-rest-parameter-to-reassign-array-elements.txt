const source = [1,2,3,4,5,6,7,8,9,10];
function removeFirstTwo(list) {
  "use strict";
  // change code below this line
  const [,,...arr]= list; /*To assign the array 'list' avoiding the first 3 numbers to the array 'arr' we need to use commas, when the desired index to be our first value is reached, the rest parameter along the reciever array 'arr' name must be included at the end. After that, we need only assign the array of interest and the destructured assginment with the rest parameter is done.*/
  // change code above this line
  return arr;
}
const arr = removeFirstTwo(source);
console.log(arr); // should be [3,4,5,6,7,8,9,10]
console.log(source); // should be [1,2,3,4,5,6,7,8,9,10];

/*In some situations involving array destructuring, we might want to 
collect the rest of the elements into a separate array.
The result is similar to A.rray.prototype.s.lice(), as shown below:

const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
console.log(a, b); // 1, 2
console.log(arr); // [3, 4, 5, 7]

Variables a and b take the first and second values from the array. 
After that, because of rest parameter's presence, arr gets rest of 
the values in the form of an array. The rest element only works 
correctly as the last variable in the list. As in, you cannot use 
the rest parameter to catch a subarray that leaves out last element 
of the original array. */