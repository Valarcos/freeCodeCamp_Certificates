function largestOfFour(arr) {
  
  /*let maxNumber=0; badly implemented, since it does not reset for
  every loop, meaning it does not reset after it exits a subarray, 
  the numbers of the following arrays will be compared with the 
  numbers of previous arrays, when that should not be the case.
  
  Whats more, if implemented that way, the code wont work properly 
  if an array has numbers below zero.*/
  
  let superiorArr=[];
  for (let i = 0; i < arr.length; i++){
    let maxNumber = arr[i][0];
    for (let j = 0; j < arr[i].length; j++){
      /*ALWAYS PAY ATTENTION TO THE AUXILIARY VARIABLES USED FOR 
      INDEX IDENTIFICATION WHEN ITERATING THROUGH ARRAYS AND 
      OBJECTS. THEY MUST BE THE SAME WHEN IMPLEMENTING THE FOR 
      LOOPS */
      if(arr[i][j]>maxNumber){
        maxNumber= arr[i][j];
      }
    }
    superiorArr.push(maxNumber);
  }
  return superiorArr;
/*
  let superiorArr=[];
  for (let i = 0; i < arr.length; i++){
    let maxNumber = arr[i][0];
    for (let j = 0; j < arr[i].length; i++){
      /*Because the variable i is being incremented instead of the
      j variable in this for loop(the j variable should be the one
      being incremented), when the loop tries to reach an element 
      with an index bigger than the biggest index the subArray being 
      iterated has, the value turns to 'undefined', thus the length
      property cannot be read and the code crashes*/

      /*if(arr[i][j]>maxNumber){
        maxNumber= arr[i][j];
      }
    }
    superiorArr.push(maxNumber);
  }
  return superiorArr;*/
}

let result= largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);


console.log(result);