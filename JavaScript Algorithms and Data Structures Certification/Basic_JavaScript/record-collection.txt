/*Be extremely mindful of the syntaxis used when accessing 
subsubjects inside JSON objects since the lack of a single indicator
of where the element comes from results in an undesired result.

One great example that might be good to take into account when
treating with this type of objects is the path that shows in the
windows explorer every time I access some folder. There will always
be the 
main section > harddisk> mainfolder#1> subfolder#1> subsubfolder> ...>desiredfolder */

// Setup
var collection = {
  2548: {
    album: "Slippery When Wet",
    artist: "Bon Jovi",
    tracks: [
      "Let It Rock",
      "You Give Love a Bad Name"
    ]
  },
  2468: {
    album: "1999",
    artist: "Prince",
    tracks: [
      "1999",
      "Little Red Corvette"
    ]
  },
  1245: {
    artist: "Robert Palmer",
    tracks: [ ]
  },
  5439: {
    album: "ABBA Gold"
  }
};

// Only change code below this line
function updateRecords(id, prop, value) {
  
  if(prop!="tracks") {
    if (value!=""){
      collection[id][prop]= value;
    }
  }

  if (prop=="tracks"){
    if (!collection[id].hasOwnProperty("tracks")){
      
      collection[id].tracks= [];
      collection[id].tracks[0]= value;
    }
  }

  if (prop=="tracks"){
    if (value!=""){
      
      collection[id][prop].push(value);
    }
  }

  if(value==""){
    delete collection[id][prop];
  }

  return collection;
}

// Alter values below to test your code
updateRecords(5439, "artist", "ABBA");
updateRecords(5439, "tracks", "Take a Chance on Me");
updateRecords(2548, "artist", "");
updateRecords(1245, "tracks", "Addicted to Love");
updateRecords(2468, "tracks", "Free");
updateRecords(2548, "tracks", "");
updateRecords(1245, "album", "Riptide");

console.log(collection);
