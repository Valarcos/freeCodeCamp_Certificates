//Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["JavaScript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(name, prop){
// Only change code below this line
    for(var i=0; i < contacts.length; i++){
        
        if(contacts[i].firstName==[name]){
            
            console.log(name);
            if(contacts[i].hasOwnProperty(prop)){
                return contacts[i][prop];
            } else{
                return "No such property";
            }
        } //else{ return "No such contact"} old and wrong code
    }
    
    return "No such contact"; /*I previously had included this line inside the 
for loop, only to get a failing function. The things is that despite what i could 
have thought was correct, I should have payed more attention to the keywords I 
was using when writing the code. The return keyword ALWAYS interrupts the 
execution of the snippet of code it is included in, resulting in loops to stop 
cycling, functions to avoid running lines of code, etc. In this case, I was 
including a return line inside the for loop, rendering the loop useless since 
the condition for that return to execute was that the first if failed. */

// Only change code above this line
}

// Change these values to test your function
console.log(lookUpProfile("Akira", "likes"));
console.log(lookUpProfile("Kristian", "lastName"));