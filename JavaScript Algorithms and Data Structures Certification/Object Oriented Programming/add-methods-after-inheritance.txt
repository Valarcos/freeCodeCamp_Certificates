function Animal() { }
Animal.prototype.eat = function () {
  console.log("nom nom nom");
};

function Dog() { }

// Add your code below this line

Dog.prototype = Object.create(Animal.prototype);
//Inherits prototype from Animal

Dog.prototype.constructor = Dog;
/*Sets the Dog's constructor property to the Dog object, so that 
an instance of the object, beagle for example, returns its own 
constructor with beagle.constructor and not the supertype's 
constructor*/

Dog.prototype.bark = function () {
  console.log("Woof!");
}
//Adds a function unique to Dog objects



// Add your code above this line

let beagle = new Dog();



beagle.eat(); // Should print "nom nom nom"
beagle.bark(); // Should print "Woof!"

/*A constructor function that inherits its prototype object from a
supertype constructor function can still have its own methods in
addition to inherited methods.

For example, Bird is a constructor that inherits its prototype
from Animal:

function Animal() { }
Animal.prototype.eat = function() {
  console.log("nom nom nom");
};
function Bird() { }
Bird.prototype = Object.create(Animal.prototype);
Bird.prototype.constructor = Bird;

In addition to what is inherited from Animal, you want to add
behavior that is unique to Bird objects. Here, Bird will get a fly
() function. Functions are added to Bird's prototype the same way
as any constructor function:

Bird.prototype.fly = function() {
  console.log("I'm flying!");
};

Now instances of Bird will have both eat() and fly() methods:

let duck = new Bird();
duck.eat(); // prints "nom nom nom"
duck.fly(); // prints "I'm flying!"*/

