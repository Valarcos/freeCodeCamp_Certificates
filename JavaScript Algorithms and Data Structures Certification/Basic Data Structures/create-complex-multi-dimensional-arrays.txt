let myNestedArray = 
[
  // change code below this line
//We are at first level of depth
  ['unshift', false, 
  //We are at second level of depth
    [1, 2, 3],'complex', 'nested'
  ],
  ['loop', 'shift', 
    [
    //We are at third level of depth
      ['six', 'seven', 'one thousand'],[6, 7, 1000],'deep'
    ], 'method'
  ],
  ['concat', 
    [
      ['up', 'down'],[false, true],
      [
      //We are at fourth level of depth
        ['we can never go to deep'],'deeper'
      ]
    ], 'spread', 'array'
  ],
  ['mutate', 1327.98, 'splice', 'slice', 'push'],
  ['iterate', 1.3849, 7,
    [
      [
        [
        //We finally reached the fifth level of depth
          'Darkest Dungeon', 'deepest'
        ]
      ]
    ], '8.4876', 'arbitrary', 'depth'
  ]
  // change code above this line
];

/*One of the most powerful features when thinking of arrays as data 
structures, is that arrays can contain, or even be completely made 
up of other arrays. We have seen arrays that contain arrays in 
previous challenges, but fairly simple ones. However, arrays can 
contain an infinite depth of arrays that can contain other arrays, 
each with their own arbitrary levels of depth, and so on. In this 
way, an array can very quickly become very complex data structure, 
known as a multi-dimensional, or nested array. Consider the 
following example:

let nestedArray = [ // top, or first level - the outer most array
  ['deep'], // an array within an array, 2 levels of depth
  [
    ['deeper'], ['deeper'] // 2 arrays nested 3 levels deep
  ],
  [
    [
      ['deepest'], ['deepest'] // 2 arrays nested 4 levels deep
    ],
    [
      [
        ['deepest-est?'] // an array nested 5 levels deep
      ]
    ]
  ]
];

While this example may seem convoluted, this level of complexity is 
not unheard of, or even unusual, when dealing with large amounts of 
data. However, we can still very easily access the deepest levels of 
an array this complex with bracket notation:

console.log(nestedArray[2][1][0][0][0]);
// logs: deepest-est?

And now that we know where that piece of data is, we can reset it if 
we need to:

nestedArray[2][1][0][0][0] = 'deeper still';

console.log(nestedArray[2][1][0][0][0]);
// now logs: deeper still */