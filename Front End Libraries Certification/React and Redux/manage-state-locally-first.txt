class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  // add handleChange() and submitMessage() methods here
  handleChange(event){
    this.setState({
      input: event.target.value,
      messages: this.state.messages
    })
  }; 

  submitMessage(){
    this.setState({
      messages: [...this.state.messages].concat(this.state.input),//this.state.input or this.state.props 
      input: ''
    })
  }

  render() {
    return (
      
      <div>
	
        <div>{this.state.input}</div> 
        {/*This div checks if the input box works or not*/}

        <h2>Type in a new Message:</h2>
        { /* render an input, button, and ul here */ }
        <input onChange={this.handleChange.bind(this)} value={this.state.input}/>
        <button onClick={this.submitMessage.bind(this)}>Add Message</button>
        <ul>
          {this.state.messages.map((x, i)=>{
            return <li key={i}>{x}</li>
          })}
        </ul>
        { /* remember that javascript code can be used inside html elements while enclosed by bracers  */ }
      </div>
    );
  }
};

/**
 * Here you'll finish creating the DisplayMessages 
 * component.
 * 
 * First, in the render() method, have the component 
 * render an input element, button element, and ul 
 * element. When the input element changes, it should 
 * trigger a handleChange() method. Also, the input 
 * element should render the value of input that's in the 
 * component's state. The button element should trigger a 
 * submitMessage() method when it's clicked.
 * 
 * Second, write these two methods. The handleChange() 
 * method should update the input with what the user is 
 * typing. The submitMessage() method should concatenate 
 * the current message (stored in input) to the messages 
 * array in local state, and clear the value of the input.
 * 
 * Finally, use the ul to map over the array of messages 
 * and render it to the screen as a list of li elements.
 **/