<!-- The D3 library seems to be another tool 
capable of building the HTML of a document 
without writting in the HTML document itself.

It reminds me of the way React renders 
information to the document, coupling the HTML 
and JavaScript in the same place.

If it is so similar I wonder what its specific 
utilities are. -->

<!-- Why is the .enter method needed when the 
.append method exists and is able to add new elements to the document? -->

<!-- After a new read at previous challenges 
and comparing the .append method to the .enter
method I think I finally grasped its 
functionality. The .enter method may be used as
a conditional question to the selection of DOM 
elements, kind of like and if statement, 
executing the code that follows for every 
element missing that should be there. -->

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    // Add your code below this line
    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text("New Title")


    // Add your code above this line
  </script>
</body>

<!--The D3 library focuses on a data-driven 
approach. When you have a set of data, you can 
apply D3 methods to display it on the page. 
Data comes in many formats, but this challenge 
uses a simple array of numbers.

The first step is to make D3 aware of the 
data. The data() method is used on a selection 
of DOM elements to attach the data to those 
elements. The data set is passed as an 
argument to the method.

A common workflow pattern is to create a new 
element in the document for each piece of data 
in the set. D3 has the enter() method for this 
purpose.

When enter() is combined with the data() 
method, it looks at the selected elements from 
the page and compares them to the number of 
data items in the set. If there are fewer 
elements than data items, it creates the 
missing elements.

Here is an example that selects a ul element 
and creates a new list item based on the 
number of entries in the array:

<body>
  <ul></ul>
  <script>
    const dataset = ["a", "b", "c"];
    d3.select("ul").selectAll("li")
      .data(dataset)
      .enter()
      .append("li")
      .text("New item");
  </script>
</body>

It may seem confusing to select elements that 
don't exist yet. This code is telling D3 to 
first select the ul on the page. Next, select 
all list items, which returns an empty 
selection. Then the data() method reviews the 
dataset and runs the following code three 
times, once for each item in the array. The 
enter() method sees there are no li elements 
on the page, but it needs 3 (one for each 
piece of data in dataset). New li elements are 
appended to the ul and have the text "New 
item".-->
